{"ast":null,"code":"var _jsxFileName = \"/home/henri/medicare/frontend/src/components/InputContainer/InputContainer.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport styles from './InputContainer.module.css';\n\nconst InputContainer = props => {\n  const containerRef = useRef(null);\n  const nameRef = useRef(null);\n  const [activeName, setActiveName] = useState('');\n  let propClassName = '';\n  useEffect(() => {\n    // Focus input even if clicked on activeName\n    if (nameRef.current) {\n      nameRef.current.addEventListener('click', () => {\n        containerRef.current.querySelector('input').focus();\n      });\n    } // Toggle focus/active mode\n\n\n    if (containerRef.current && containerRef.current.querySelector('input')) {\n      const input = containerRef.current.querySelector('input');\n      input.addEventListener('focus', () => {\n        setActiveName(styles.ActiveName);\n      });\n      input.addEventListener('blur', () => {\n        if (input.value.length === 0) {\n          setActiveName('');\n        }\n      });\n    }\n  }, []);\n\n  if (props.styleName) {\n    propClassName = props.styleName;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.InputContainer + ' ' + propClassName,\n    ref: containerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Name + ' ' + activeName,\n    ref: nameRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, props.name), props.children);\n};\n\nexport default InputContainer;","map":{"version":3,"sources":["/home/henri/medicare/frontend/src/components/InputContainer/InputContainer.js"],"names":["React","useRef","useEffect","useState","styles","InputContainer","props","containerRef","nameRef","activeName","setActiveName","propClassName","current","addEventListener","querySelector","focus","input","ActiveName","value","length","styleName","Name","name","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMO,OAAO,GAAGP,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAIQ,aAAa,GAAG,EAApB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIM,OAAO,CAACI,OAAZ,EAAqB;AACnBJ,MAAAA,OAAO,CAACI,OAAR,CAAgBC,gBAAhB,CAAiC,OAAjC,EAA0C,MAAM;AAC9CN,QAAAA,YAAY,CAACK,OAAb,CAAqBE,aAArB,CAAmC,OAAnC,EAA4CC,KAA5C;AACD,OAFD;AAGD,KANa,CAQd;;;AACA,QACER,YAAY,CAACK,OAAb,IACAL,YAAY,CAACK,OAAb,CAAqBE,aAArB,CAAmC,OAAnC,CAFF,EAGE;AACA,YAAME,KAAK,GAAGT,YAAY,CAACK,OAAb,CAAqBE,aAArB,CAAmC,OAAnC,CAAd;AAEAE,MAAAA,KAAK,CAACH,gBAAN,CAAuB,OAAvB,EAAgC,MAAM;AACpCH,QAAAA,aAAa,CAACN,MAAM,CAACa,UAAR,CAAb;AACD,OAFD;AAIAD,MAAAA,KAAK,CAACH,gBAAN,CAAuB,MAAvB,EAA+B,MAAM;AACnC,YAAIG,KAAK,CAACE,KAAN,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BT,UAAAA,aAAa,CAAC,EAAD,CAAb;AACD;AACF,OAJD;AAKD;AACF,GAzBQ,EAyBN,EAzBM,CAAT;;AA2BA,MAAIJ,KAAK,CAACc,SAAV,EAAqB;AACnBT,IAAAA,aAAa,GAAGL,KAAK,CAACc,SAAtB;AACD;;AAED,sBACE;AACE,IAAA,SAAS,EAAEhB,MAAM,CAACC,cAAP,GAAwB,GAAxB,GAA8BM,aAD3C;AAEE,IAAA,GAAG,EAAEJ,YAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACiB,IAAP,GAAc,GAAd,GAAoBZ,UAApC;AAAgD,IAAA,GAAG,EAAED,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACgB,IADT,CAJF,EAOGhB,KAAK,CAACiB,QAPT,CADF;AAWD,CAhDD;;AAkDA,eAAelB,cAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styles from './InputContainer.module.css';\n\nconst InputContainer = props => {\n  const containerRef = useRef(null);\n  const nameRef = useRef(null);\n  const [activeName, setActiveName] = useState('');\n  let propClassName = '';\n\n  useEffect(() => {\n    // Focus input even if clicked on activeName\n    if (nameRef.current) {\n      nameRef.current.addEventListener('click', () => {\n        containerRef.current.querySelector('input').focus();\n      });\n    }\n\n    // Toggle focus/active mode\n    if (\n      containerRef.current &&\n      containerRef.current.querySelector('input')\n    ) {\n      const input = containerRef.current.querySelector('input');\n\n      input.addEventListener('focus', () => {\n        setActiveName(styles.ActiveName);\n      });\n\n      input.addEventListener('blur', () => {\n        if (input.value.length === 0) {\n          setActiveName('');\n        }\n      });\n    }\n  }, []);\n\n  if (props.styleName) {\n    propClassName = props.styleName;\n  }\n\n  return (\n    <div\n      className={styles.InputContainer + ' ' + propClassName}\n      ref={containerRef}\n    >\n      <div className={styles.Name + ' ' + activeName} ref={nameRef}>\n        {props.name}\n      </div>\n      {props.children}\n    </div>\n  );\n};\n\nexport default InputContainer;\n"]},"metadata":{},"sourceType":"module"}