{"ast":null,"code":"var _jsxFileName = \"/home/henri/medicare/frontend/src/components/InputContainer/InputContainer.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport styles from './InputContainer.module.css';\n\nconst InputContainer = props => {\n  const containerRef = useRef(null);\n  const [activeName, setActiveName] = useState('');\n  let propClassName = ''; // Toggle focus/active mode\n\n  useEffect(() => {\n    if (containerRef.current) {\n      focusInput = () => {\n        console.log('a');\n\n        if (containerRef.current) {\n          containerRef.current.focus();\n        }\n      };\n    }\n\n    if (containerRef.current && containerRef.current.querySelector('input')) {\n      const input = containerRef.current.querySelector('input');\n      input.addEventListener('focus', () => {\n        setActiveName(styles.ActiveName);\n      });\n      input.addEventListener('blur', () => {\n        if (input.value.length === 0) {\n          setActiveName('');\n        }\n      });\n    }\n  }, []); // Focus input even if clicked on activeName\n\n  let focusInput = () => {};\n\n  if (props.styleName) {\n    propClassName = props.styleName;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.InputContainer + ' ' + propClassName,\n    ref: containerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Name + ' ' + activeName,\n    onClick: focusInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, props.name), props.children);\n};\n\nexport default InputContainer;","map":{"version":3,"sources":["/home/henri/medicare/frontend/src/components/InputContainer/InputContainer.js"],"names":["React","useRef","useEffect","useState","styles","InputContainer","props","containerRef","activeName","setActiveName","propClassName","current","focusInput","console","log","focus","querySelector","input","addEventListener","ActiveName","value","length","styleName","Name","name","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAIO,aAAa,GAAG,EAApB,CAH8B,CAK9B;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,YAAY,CAACI,OAAjB,EAA0B;AACxBC,MAAAA,UAAU,GAAG,MAAM;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,YAAIP,YAAY,CAACI,OAAjB,EAA0B;AACxBJ,UAAAA,YAAY,CAACI,OAAb,CAAqBI,KAArB;AACD;AACF,OALD;AAMD;;AACD,QAAIR,YAAY,CAACI,OAAb,IAAwBJ,YAAY,CAACI,OAAb,CAAqBK,aAArB,CAAmC,OAAnC,CAA5B,EAAyE;AACvE,YAAMC,KAAK,GAAGV,YAAY,CAACI,OAAb,CAAqBK,aAArB,CAAmC,OAAnC,CAAd;AAEAC,MAAAA,KAAK,CAACC,gBAAN,CAAuB,OAAvB,EAAgC,MAAM;AACpCT,QAAAA,aAAa,CAACL,MAAM,CAACe,UAAR,CAAb;AACD,OAFD;AAIAF,MAAAA,KAAK,CAACC,gBAAN,CAAuB,MAAvB,EAA+B,MAAM;AACnC,YAAID,KAAK,CAACG,KAAN,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BZ,UAAAA,aAAa,CAAC,EAAD,CAAb;AACD;AACF,OAJD;AAKD;AACF,GAtBQ,EAsBN,EAtBM,CAAT,CAN8B,CA8B9B;;AACA,MAAIG,UAAU,GAAG,MAAM,CAAE,CAAzB;;AAEA,MAAIN,KAAK,CAACgB,SAAV,EAAqB;AACnBZ,IAAAA,aAAa,GAAGJ,KAAK,CAACgB,SAAtB;AACD;;AAED,sBACE;AACE,IAAA,SAAS,EAAElB,MAAM,CAACC,cAAP,GAAwB,GAAxB,GAA8BK,aAD3C;AAEE,IAAA,GAAG,EAAEH,YAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACmB,IAAP,GAAc,GAAd,GAAoBf,UAApC;AAAgD,IAAA,OAAO,EAAEI,UAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACkB,IADT,CAJF,EAOGlB,KAAK,CAACmB,QAPT,CADF;AAWD,CAhDD;;AAkDA,eAAepB,cAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styles from './InputContainer.module.css';\n\nconst InputContainer = props => {\n  const containerRef = useRef(null);\n  const [activeName, setActiveName] = useState('');\n  let propClassName = '';\n\n  // Toggle focus/active mode\n  useEffect(() => {\n    if (containerRef.current) {\n      focusInput = () => {\n        console.log('a');\n        if (containerRef.current) {\n          containerRef.current.focus();\n        }\n      };\n    }\n    if (containerRef.current && containerRef.current.querySelector('input')) {\n      const input = containerRef.current.querySelector('input');\n\n      input.addEventListener('focus', () => {\n        setActiveName(styles.ActiveName);\n      });\n\n      input.addEventListener('blur', () => {\n        if (input.value.length === 0) {\n          setActiveName('');\n        }\n      });\n    }\n  }, []);\n\n  // Focus input even if clicked on activeName\n  let focusInput = () => {};\n\n  if (props.styleName) {\n    propClassName = props.styleName;\n  }\n\n  return (\n    <div\n      className={styles.InputContainer + ' ' + propClassName}\n      ref={containerRef}\n    >\n      <div className={styles.Name + ' ' + activeName} onClick={focusInput}>\n        {props.name}\n      </div>\n      {props.children}\n    </div>\n  );\n};\n\nexport default InputContainer;\n"]},"metadata":{},"sourceType":"module"}